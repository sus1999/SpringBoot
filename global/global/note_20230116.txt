
com.global.domain.Account

Account domain 에 필요한 data
  - 로그인
  - 프로필
  - 알림설정


com.global.account.AccountController

- GET"/signup" 요청을 받아서 account/sign-up.html 페이지에 보여줌
- 회원 가입 폼에서 입력 받을 수 있는 정보를
- "닉네임", "이메일", "패스워드" 폼 객체로 제공함


com.global.config.SecurityConfig

Ctrl + O (overriding)
  ㄴ configure(http:HttpSecurity) 선택


<test>

com.global.account.AccountController 에서
Ctrl + Shift + T : text 단축키


- 회원가입 뷰 작성하기
  - bootstrap
      네비게이션
      폼
  - thymeleaf
    SignUpForm 타입 객체를 폼 객체로 설정함
  - 웹(HTML, CSS, JavaScript)
    검증기능(validation) 설정
      닉네임(3~20자, 입력필수)
      이메일(이메일형식, 입력필수)
      패스워드(8~50자, 입력필수)


com.global.config.SecurityConfig

Ctrl + O (overriding)
  ㄴ configure(web:WebSecurity) 선택


com.global.mail.ConsoleMailSender 를
@Profile("local") @Component 로 설정하고
application.properties 파일에서
spring.profiles.active=local 로 설정하면
com.global.account.AccountController 에서
private final JavaMailSender javaMailSender 를 선언하고
signUpSubmit 메소드에서 이메일을 전송할 수 있게 됨



com.global.account.AccountControllerTest

실제로 mail 을 전송하는지 test 하기
@MockBean  <-- SpringBootTest 에서 제공하는 annotation 으로,
               Mock 객체들을 Spring 의 ApplicationContext 에 넣어줌
               같은 type 의 Bean 이 이미 있는 경우, MockBean 으로 교체함
JavaMailSender javaMailSender;


회원 가입 처리 확인하기 - 입력값 오류 테스트 / 입력값 정상 테스트


회원가입할 때 입력한
비밀번호를 그대로(평문으로) 저장하면 아주 위험함
 ㄴ 인코딩해서 저장해야 함
 Account Entity 를 저장할 때 password 를 encoding 함
           ㄴ DB 의 table

Spring Security PasswordEncoder
  - PasswordEncoderFactories.createDelegatingPasswordEncoder()
  -    ㄴ 여러 가지 hash algorithm 을 지원하는 password encoder
  - bcrypt  <--  default algorithm

암호화/복호화(양방향) 보다는 password 를 hashing 해서 저장한 후
서로 비교해서 맞는지 알아보면 됨 (단방향으로 문자를 변경해서 저장함)
- 사용자들은 일반적으로 같은 비밀번호를 여러 사이트에서 동일하게
- 사용하는 경우가 많으므로 한 곳에서 비밀번호가 hacking 당하면
- 여러 사이트에서의 정보를 모두 도난 당할 수 있음
- 이를 방지하기 위해서 password 를 encoding 해야 함

Hashing : 특정문자를 알고리즘에 따라서 변형해서 저장한다는 의미

com.global.config 에 AppConfig 클래스 작성하기


20230117

[이메일 인증하기]

GET 방식으로
/check-email-token
token=${token} email=${email}
요청 처리하기
  - 이메일이 정확하지 않으면 에러 처리함
  - 토큰이 정확하지 않으면 에러 처리함
  - 이메일과 토큰이 정확해야 가입 완료 처리 진행
    - 가입 일시 설정
    - 이메일 인증 여부로 true 설정하기

인증 확인하는 View
  - 입력값에 오류가 있는 경우에는 메세지를 출력함
  - 인증이 완료된 경우에는 환영 메세지 출력하고
    몇 번째 가입자인지 알려줌


com.global.account.AccountController 클래스에서 아래 메소드 추가

@GetMapping("/check-email-token")
  public String checkEmailToken(String token, String email, Model model){
    // 가입자가 입력한 이메일을 이미 사용하고 있는 회원이 있는지 확인하기
    return "";
  }

checkEmailToken() 메소드에서 findByEmail() 을 호출하기 위해서
accountRepository.findByEmail(email)
AccountController 클래스에
private final AccountRepository accountRepository 멤버 추가

이하 checkEmailToken() 메소드 작성하기...

templates/account 에 check-email.html 작성하기


com.global.account.AccountService 클래스에서
private Account saveNewAccount(SignUpForm signUpForm) 메소드의 파라미터에
@Valid annotation 추가
  ㄴ 객체 안에서 들어오는 값에 대해서 검증함
<-- private Account saveNewAccount(@Valid SignUpForm signUpForm)

@Transactional
public void processNewAccount(SignUpForm signUpForm) 메소드에
@Transactional annotation 설정
 ㄴ newAccount 객체가 persistence 상태가 유지 되고
    persistence 상태가 유지되는 객체는
    Transaction 이 종료될 때, 상태를 DB 에 sync 하게 됨
      ㄴ 이 상태에서 생성된 토큰값이 DB 에 저장됨

    Account newAccount = saveNewAccount(signUpForm);
    // 이메일 보내기 전에 토큰값 생성하기
    newAccount.generateEmailCheckToken();
    sendSignUpConfirmEmail(newAccount);

test 폴더의
com.global.account.AccountControllerTest 클래스의

@DisplayName("회원 가입 처리 확인하기 - 입력값 정상인 경우")
  @Test
  void signUpSubmit_with_correct_input() throws Exception 메소드에

  // token 값이 Null 이 아닌지(제대로 DB 에 저장되었는지) 확인하기
      assertNotNull(account.getEmailCheckToken());
    ㄴ 이 내용 추가하기


[회원가입 : 인증메일확인 테스트하기]

테스트 내용
  - 입력값이 잘못 된 경우
    - error Property (속성 - 변수)가 model 에 들어있는지 확인하기
    - View 이름이 account/check-email 인지 확인하기
  - 입력값이 맞는 경우
    - Model 에 error 가 없는지 확인하기
    - Model 에 numberOfUser 가 있는지 확인하기
    - Model 에 nickName 이 있는지 확인하기
    - View 이름 확인하기


토큰값을 DB 에 저장하기 위해서
AccountControllerTest 클래스에
@Transactional 추가하기

AccountController 클래스의
  @GetMapping("/check-email-token")
  public String checkEmailToken(String token, String email, Model model) 메소드에서

  아래 code debugging 해 보기 - Account 클래스의 멤버변수에 어떤 값이 전달되었는지 확인함
  if (!account.getEmailCheckToken().equals(token)){
        model.addAttribute("error", "wrong email");
        return view;
      }

AccountController 클래스의  checkEmailToken() 메소드에서 주석처리한 부분을
Account 클래스의 completeSignUp() 메소드로 옮김

AccountControllerTest 클래스 전체 테스트하기


[가입 완료 후 자동으로 로그인하기]

  - 회원가입 완료 직후 자동 로그인
  - 이메일 인증 완료 직후 자동 로그인

  - Spring Security
    - SecurityContext 에 Authentication(Token) 이 있는지 여부
    - UsernamePasswordAuthenticationToken

  - View
    - 이메일 인증이 안 된 사용자의 경우, 인증 경고창 보여주기
    - 이메일 인증을 마친 회원은 자동 로그인됨
    - 로그인 되면 main navigation menu 변경됨


AccountController 클래스에서
checkEmailToken() 메소드에 code 추가하기
 ㄴ if (!account.isValidToken(token)) 인 경우,
    에러 메세지 보여주기

Account 클래스에
public boolean isValidToken(String token) 메소드 작성하기
  public boolean isValidToken(String token) {
    return this.emailCheckToken.equals(token);
  }

AccountService 클래스의
public void processNewAccount(SignUpForm signUpForm) 메소드가
Account 객체를 반환하도록 수정함

public Account processNewAccount(SignUpForm signUpForm){
 ..................
  return newAccount;
}

AccountController 클래스의 public String signUpSubmit() 메소드에 code 추가
<-- Account account = accountService.processNewAccount(signUpForm);
        accountService.login(account);

AccountService 클래스에
public void login(Account account)  작성하기
  // password 를 encoding 하기 때문에 아래의 방법으로 로그인함
  public void login(Account account) {
    UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(
                                                        account.getNickName(),
                                                        account.getPassword(),
                                                        List.of(new SimpleGrantedAuthority("ROLE_USER"))
                                                      );
    // Spring 에서 제공하는 SecurityContextHolder 에서
    // context 를 받아와서 인증하기
    SecurityContext context = SecurityContextHolder.getContext();
    context.setAuthentication(token);
  }


  [Authentication 객체를 사용해서 인증하는 방법]
    ㄴ 이 방법은 password 를 encoding 하는 경우에는 사용할 수 없음
       그래서, 지금은 위의 방법으로 함

  public void login(Account account) {
    UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(
                                                        username, passwpord);
    Authentication authentication = authenticationManager.authenticate(token);
    // Spring 에서 제공하는 SecurityContextHolder 에서
    // context 를 받아와서 인증하기
    SecurityContext context = SecurityContextHolder.getContext();
    context.setAuthentication(token);
  }

AccountController 클래스에서 code 추가
accountService.login(account);

AccountControllerTest 클래스의
void checkEmailToken_with_wrong_input() throws Exception 에 code 추가
  .andExpect(unauthenticated());
     ㄴ 인증이 된 사용자가 아닌지 확인할 수 있음

void checkEmailToken_with_correct_input() throws Exception 에 code 추가
  .andExpect(authenticated().withUsername("global1000"));
     ㄴ 인증이 된 사용자인지 확인할 수 있음

void signUpForm() throws Exception 에 code 추가
  .andExpect(unauthenticated())

void signUpSubmit_with_wrong_input() throws Exception 에 code 추가
  .andExpect(unauthenticated())

void signUpSubmit_with_correct_input() throws Exception 에 code 추가
  .andExpect(authenticated().withUsername("global1000"))


AccountService 클래스에
 private final AuthenticationManager authenticationManager;  추가 (X)


AccountControllerTest 클래스 전체 테스트하기


[회원가입 - 메인화면 네비게이션 메뉴 변경하기]

  - View
    - 이메일 인증이 안 된 사용자의 경우, 인증 경고창 보여주기
    - 이메일 인증을 마친 회원은 자동 로그인됨
    - 로그인 되면 main navigation menu 변경됨

pom.xml 에서 아래의 dependency 가 있는지 확인하기
    <dependency>
			<groupId>org.thymeleaf.extras</groupId>
			<artifactId>thymeleaf-extras-springsecurity5</artifactId>
		</dependency>

- 인증 정보가 없는 경우
  - 로그인/가입 버튼 보여주기
- 인증 정보가 있는 경우
  - 알림/study 개설/profile dropdown menu 보여주기
  - 이메일 인증을 하지 않은 사용자에게는 인증 경고창 띄우기


index.html 에
xmlns:sec="http://www.thymeleaf.org/extras/spring-security" 추가하고
sec:authorize="!isAuthenticated" 설정하기

      <li class="nav-item" sec:authorize="!isAuthenticated">
        <a class="nav-link" href="#" th:href="@{/login}">로그인</a>
      </li>
      <li class="nav-item" sec:authorize="!isAuthenticated">
        <a class="nav-link" href="#" th:href="@{/signup}">가입</a>
      </li>


[Front-end Library 설정]

NPM 라이브러리 설치하기 (static 폴더에서 설치함)

C:\workspace\springboot\global\src\main\resources\static>
- package.json 에 프론트엔드 라이브러리 제공함
- static 폴더(directory) 에서
- package.json 을 사용해서 library 를 받으면
- 정적 리소스로 프론트엔드 library 를 사용하게 됨

- maven pom.xml 을 빌드할 때 static 디렉토리 아래에 있는
- package.json 도 빌드하도록 설정함

C:\workspace\springboot\global\src\main\resources\static> npm init


[npm install bootstrap]

node.js 설치하기
  https://nodejs.org/ko/download/ 에서
  Windows Installer (.msi)    >     64-bit 다운로드
  node-v18.13.0-x64.msi 파일 우클릭하고 설치 클릭

node.js 환경변수 설정
환경변수 창에서
시스템변수 > 새로 만들기 > 변수이름에 npm 를 입력 >
변수값에 C:\Users\global\AppData\Roaming\npm 입력 > 확인

시스템변수 > Path 선택 > 편집 > 새로 만들기 >
C:\Program Files\nodejs\ 입력 후
확인 세 차례 누름

cmd 관리자 권한으로 실행해서
node -v 입력하고 node.js 버전 확인하기

cmd 관리자 권한으로 새로 실행해서

아래와 같이 진행함

Microsoft Windows [Version 10.0.19045.2486]
(c) Microsoft Corporation. All rights reserved.

C:\Windows\system32>cd C:\workspace\springboot\global\src\main\resources\static

C:\workspace\springboot\global\src\main\resources\static>npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (static)
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to C:\workspace\springboot\global\src\main\resources\static\package.json:

{
  "name": "static",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this OK? (yes) yes
npm notice
npm notice New major version of npm available! 8.19.3 -> 9.3.0
npm notice Changelog: https://github.com/npm/cli/releases/tag/v9.3.0
npm notice Run npm install -g npm@9.3.0 to update!
npm notice

C:\workspace\springboot\global\src\main\resources\static>dir
 C 드라이브의 볼륨에는 이름이 없습니다.
 볼륨 일련 번호: 0C7D-D29C

 C:\workspace\springboot\global\src\main\resources\static 디렉터리

2023-01-17  오후 04:16    <DIR>          .
2023-01-17  오후 04:16    <DIR>          ..
2023-01-16  오전 11:04    <DIR>          images
2023-01-17  오후 03:40             4,343 index.html
2023-01-17  오후 04:16               202 package.json
               2개 파일               4,545 바이트
               3개 디렉터리  36,128,419,840 바이트 남음

C:\workspace\springboot\global\src\main\resources\static>npm install bootstrap

added 2 packages, and audited 3 packages in 2s

2 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities

C:\workspace\springboot\global\src\main\resources\static>dir
 C 드라이브의 볼륨에는 이름이 없습니다.
 볼륨 일련 번호: 0C7D-D29C

 C:\workspace\springboot\global\src\main\resources\static 디렉터리

2023-01-17  오후 04:17    <DIR>          .
2023-01-17  오후 04:17    <DIR>          ..
2023-01-16  오전 11:04    <DIR>          images
2023-01-17  오후 03:40             4,343 index.html
2023-01-17  오후 04:17    <DIR>          node_modules
2023-01-17  오후 04:17             1,813 package-lock.json
2023-01-17  오후 04:17               253 package.json
               3개 파일               6,409 바이트
               4개 디렉터리  36,118,069,248 바이트 남음

C:\workspace\springboot\global\src\main\resources\static>





pom.xml 에 아래 code (plugin) 추가

<plugin>
  <groupId>com.github.eirslett</groupId>
  <artifactId>frontend-maven-plugin</artifactId>
  <version>1.8.0</version>
  <configuration>
    <nodeVersion>v4.6.0</nodeVersion>
    <workingDirectory>src/main/resources/static</workingDirectory>
  </configuration>
  <executions>
    <execution>
      <id>install node and npm</id>
      <goals>
        <goal>install-node-and-npm</goal>
      </goals>
      <phase>generate-resources</phase>
    </execution>
    <execution>
      <id>npm install</id>
      <goals>
        <goal>npm</goal>
      </goals>
      <phase>generate-resources</phase>
      <configuration>
        <arguments>install</arguments>
      </configuration>
    </execution>
  </executions>
</plugin>


새로 설정하고 프로젝트 실행해 보기
  빌드
  git(버전관리)
  Security 설정하기


Security 설정하기
  com.global.config.SecurityConfig 클래스의
  public void configure(WebSecurity web) 메소드에
  .mvcMatchers("/node_modules/**") <-- 추가하기











